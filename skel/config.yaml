#
# \ \     /_)       _)
#  \ \   /  |   __|  |   _ \   __ \    _ \
#   \ \ /   | \__ \  |  (   |  |   |   __/
#    \_/   _| ____/ _| \___/  _|  _| \___|  Configuration File
#
# This file contains the configuration for this VISIONE collection.


main:
  # Label for this collection (optional).
  collection_name: null

  # Server name to which this instance will respond. You can specify a list
  # space-separated domain names or IP addresses.
  server_name: localhost

  # Port to which this instance will bind.
  port: 8000

  # Set to true to enable the development mode. In this mode, the code of
  # services of editable installs will be mounted to docker containers, allowing
  # for live code changes.
  develop_mode: false

  # (DEPRECATED) Access credentials for the internal tomcat server.
  username: admin
  password: visione

# This section contains URL overrides for the directories where the static files
# are stored. You can modify these URLs to point to an external server, or set
# them to 'null' to serve the files locally from the collection directory.
static_files_urls:
  videos_url:         null  # URL to which 'videos/...' requests will be redirected.
  resized_videos_url: null  # URL to which 'videos/(medium|tiny)/...' requests will be redirected.
  frames_url:         null  # URL to which 'frames/...' requests will be redirected.
  resized_frames_url: null  # URL to which 'frames/(medium|tiny)/...' requests will be redirected.
  palette_url:        null  # URL to which 'palette/...' requests will be redirected.

# This section contains URL overides for the backend services. You can modify
# these URLS to point to externally hosted services, or set them to 'null' to
# use the locally hosted services.
services_urls:
  translate_url: null  # URL to which 'translate' requests will be redirected.

# This section contains the configuration for the search service.
core:
  # The defautl number of results to return in searches if not specified
  # otherwise.
  K: 10000

  ## Advanced stuff, don't touch unless you know what you're doing. Commented
  ## values are the default ones. Uncomment and change them if you want to
  ## override them.

  #-------PATH SETTINGS-------# index_path: /data/lucene-index  # LUCENE
  # save_logs: false  # SAVE_LOGS
  # log_path: /data/logs  # LOG_FOLDER
  # log_dres_path: /data/logs_dres  # LOG_FOLDER_DRES

  #-------QUERY & FIELDS SETTINGS-------#
  # OBJECTS: {"field":"objects", "similarity":"DotProduct", "weight":"1.0"}
  # BB: {"field":"txt", "similarity":"CosineSimilarity", "weight":"1.0"}
  # ALADIN: {"field":"aladin", "similarity":"DotProduct", "weight":"0.00005"}
  # CLIP: {"field":"clip", "similarity":"CosineSimilarity", "weight":"1.0"}
  # IMG_SIM: {"field":"features", "similarity":"DotProduct", "weight":"1.0"}
  #
  # RESCORER_PIPELINE: [OBJECTS, ALADIN, BB]


# This section contains the configuration for the analysis stage ('visione
# analyze' commands).
analysis:

  # Object detectors to run on the collection. For each detector, you can
  # specify overrides for the default parameters. To disable a detector, remove
  # or comment its entry.
  object_detectors:
    colors: {}
    mrcnn-lvis: {}
    vfnet64-coco: {}
    frcnn-oiv4: {}

  # Feature extractors to run on the collection. For each feature extractor, you
  # can specify overrides for the default parameters. To disable a feature
  # extractor, remove or comment its entry.
  features:
    dinov2:
      chunk-size: 1000  # Frames are processed in chunks of this size.
    aladin:
      chunk-size: 1000  # Frames are processed in chunks of this size.
    clip-openai:
      batch-size: 1   # Batch size
      num-workers: 8  # Number of workers
    clip-laion:
      batch-size: 1   # Batch size
      num-workers: 8  # Number of workers
    clip-datacomp:
      batch-size: 1   # Batch size
      num-workers: 8  # Number of workers
    biomed-clip:
      batch-size: 1   # Batch size
      num-workers: 8  # Number of workers
    clip2video:
      pad-shot-to: 6  # Pad shots shorter than this length (in seconds)
      batch-size: 1   # Batch size
      num-workers: 8  # Number of workers
    clipvip:
      pad-shot-to: 6  # Pad shots shorter than this length (in seconds)
      batch-size: 1   # Batch size
      num-workers: 8  # Number of workers

  # Frame clustering parameters. These parameters are used to cluster similar
  # frames in a video. To disable frame clustering, comment or remove the
  # 'frame_cluster' entry. (Currently not used in the system, but kept for
  # future use.)
  frame_cluster:
    # Which feature vector to employ in frames clustering. Must be one of the
    # feature extractors defined above.
    feature: dinov2


# This section contains the configuration for the indexing stage ('visione
# index' commands).
index:

  # Object-specific indexing parameters. These parameters are used to index the
  # detected objects in the collection.
  objects:

    # Labels to exclude. Labels specified in 'all' are excluded after label
    # mapping. You can specify detector-specific exclusion lists that will be
    # applied before label mapping.
    exclude_labels:
      all: []
      # Example of detector-specific exclusion list:
      # vfnet64-coco:
      #  - person
      #  - tv

    # Per-detector label mapping. These mappings are used to map the labels of
    # the detected objects to a common set of labels. The mappings are applied
    # before the exclusion lists. Default mappings are provided for the
    # available detectors.
    label_map:
      frcnn-oiv4:
        accordion: accordion_(musical_instrument)
        band-aid: band_aid
        banjo: banjo_(musical_instrument)
        barge: barge_(boat)
        bat: bat_(animal)
        billiard_table: pool_table
        blender: blender_(kitchenware)
        blue_jay: blue_jay_(bird)
        cabinetry: cabinet
        canary: canary_(bird)
        cantaloupe: cantaloupe_(melon)
        cello: cello_(musical_instrument)
        chest_of_drawers: dresser
        chicken: chicken_(animal)
        chime: chime_(musical_instrument)
        coffeemaker: coffee_maker
        common_fig: fig_(fruit)
        computer_mouse: mouse_(computer_equipment)
        crab: crab_(animal)
        cutting_board: cutting_board_(kitchenware)
        drum: drum_(musical_instrument)
        eagle: eagle_(bird)
        falcon: falcon_(bird)
        fedora: fedora_(hat)
        filing_cabinet: file_cabinet
        flute: flute_(musical_instrument)
        flying_disc: frisbee
        golf_cart: golfcart
        gondola: gondola_(boat)
        guitar: guitar_(musical_instrument)
        harmonica: harmonica_(musical_instrument)
        harp: harp_(musical_instrument)
        horn: horn_(musical_instrument)
        infant_bed: crib
        jet_ski: water_scooter
        laptop: laptop_computer
        lifejacket: life_jacket
        magpie: magpie_(bird)
        maracas: maracas_(musical_instrument)
        mechanical_fan: fan
        mixer: mixer_(kitchenware)
        mobile_phone: cell_phone
        musical_keyboard: musical_keyboard_(musical_instrument)
        oboe: oboe_(musical_instrument)
        organ: organ_(musical_instrument)
        owl: owl_(bird)
        parrot: parrot_(bird)
        shorts: short_pants
        sparrow: sparrow_(bird)
        squash: squash_(vegetable)
        suit: suit_(clothing)
        swimwear: swimsuit
        tap: faucet
        tin_can: can
        trombone: trombone_(musical_instrument)
        trumpet: trumpet_(musical_instrument)
        vehicle_registration_plate: license_plate
        violin: violin_(musical_instrument)
        wood-burning_stove: woodburning_stove
        woodpecker: woodpecker_(bird)
      mrcnn-lvis:
        automatic_washer: washing_machine
        ax: axe
        bagpipe: bagpipe_(musical_instrument)
        banjo: banjo_(musical_instrument)
        barge: barge_(boat)
        bass_horn: bass_horn_(musical_instrument)
        beanie: beanie_(hat)
        beret: beret_(hat)
        blender: blender_(kitchenware)
        bow-tie: bow_tie
        bow_(weapon): bow_and_arrow
        bread-bin: bread_bin
        bus_(vehicle): bus
        cab_(taxi): taxi
        cantaloup: cantaloupe_(melon)
        cap_(headwear): cap_(hat)
        car_(automobile): car
        cellular_telephone: cell_phone
        chime: chime_(musical_instrument)
        chopping_board: cutting_board_(kitchenware)
        chopstick: chopsticks
        clarinet: clarinet_(musical_instrument)
        convertible_(automobile): convertible_(car)
        cooking_utensil: kitchen_utensil
        cornet: trumpet_(musical_instrument)
        crescent_roll: croissant
        crow: crow_(bird)
        cymbal: cymbal_(musical_instrument)
        die: dice
        doorknob: door_handle
        eagle: eagle_(bird)
        earring: earrings
        escargot: snail
        falcon: falcon_(bird)
        fedora: fedora_(hat)
        fireplug: fire_hydrant
        first-aid_kit: first_aid_kit
        flip-flop_(sandal): flip_flop_(sandal)
        football_(american): football
        fruit_juice: juice
        giant_panda: panda
        guitar: guitar_(musical_instrument)
        harmonium: organ_(musical_instrument)
        headset: headphones
        heron: heron_(bird)
        hog: pig
        hot-air_balloon: hot_air_balloon
        icecream: ice_cream
        jean: jeans
        kitchen_table: kitchen_&_dining_room_table
        lamb-chop: lamb_chop
        lightbulb: light_bulb
        measuring_stick: ruler
        mixer_(kitchen_tool): mixer_(kitchenware)
        necktie: tie
        orange_(fruit): orange
        owl: owl_(bird)
        parrot: parrot_(bird)
        pencil_box: pencil_case
        piano: piano_(musical_instrument)
        pigeon: pigeon_(bird)
        ping-pong_ball: ping_pong_ball
        pistol: handgun
        prawn: shrimp
        pug-dog: pug_dog
        roller_skate: roller_skates
        saltshaker: salt_and_pepper_shakers
        saxophone: saxophone_(musical_instrument)
        shower_head: shower
        sofa: couch
        spectacles: glasses
        squid_(food): squid
        stapler_(stapling_machine): stapler
        straw_(for_drinking): drinking_straw
        streetlight: street_light
        sunhat: sun_hat
        table-tennis_table: table_tennis_table
        tambourine: tambourine_(musical_instrument)
        television_set: television
        toilet_tissue: toilet_paper
        train_(railroad_vehicle): train
        violin: violin_(musical_instrument)
        vulture: vulture_(bird)
        wall_socket: power_plugs_and_wall_sockets
        whistle: whistle_(musical_instrument)
        wineglass: wine_glass
      vfnet64-coco:
        donut: doughnut
        hair_drier: hair_dryer
        keyboard: computer_keyboard
        laptop: laptop_computer
        microwave: microwave_oven
        mouse: mouse_(computer_equipment)
        potted_plant: flowerpot
        remote: remote_control
        skis: ski
        sports_ball: ball
        tv: television

    # Exclude detections having a normalized area smaller than this value.
    # Normalized area is the area of the detection bounding box divided by the
    # area of the entire image.
    min_area: 0.001

    # Exclude detections having a score smaller than this value.
    threshold:
      # The 'monochrome' object is a special object extracted by the 'colors' object detector, and is used to detect monochrome frames.
      monochrome: 0.01
      colors: 0.1
      frcnn-oiv4: 0.6
      mrcnn-lvis: 0.5
      vfnet64-coco: 0.5

  # Feature-specific indexing parameters. These parameters are used to index the
  # feature vectors in the collection. Each entry in the 'analysis.features'
  # section must have a corresponding entry in this section to be available
  # during search. Conversely, each entry in this section must have a
  # corresponding entry in the 'analysis.features' section. For each feature,
  # you can specify two types of indexing: 'str' and 'faiss'.
  #  - 'str' (Surrogate Text Representation) indexing uses a disk-based Lucene
  #    indexing as backend and can scale beyond RAM size. For index types and
  #    parameters, see https://github.com/fabiocarrara/str-encoders.
  #  - 'faiss' indexing uses an in-memory Faiss index and is usually faster but
  #    requires the entire index to fit in memory. For index types see FAISS
  #    index factory documentation
  #    (https://github.com/facebookresearch/faiss/wiki/The-index-factory)
  features:

    dinov2:
      index_engine: str
      index_type: topk-sq
      index_params:
        keep: 0.25
        dim_multiplier: 100
        rectify_negatives: true

    aladin:
      index_engine: str
      index_type: topk-sq
      index_params:
        keep: 0.5
        dim_multiplier: 2

    clip-openai:
      index_engine: faiss
      index_type: Flat

    clip2video:
      index_engine: faiss
      index_type: Flat

    clip-laion:
      index_engine: faiss
      index_type: Flat

    clip-datacomp:
      index_engine: faiss
      index_type: Flat

    clipvip:
      index_engine: faiss
      index_type: Flat

    biomed-clip:
      index_engine: faiss
      index_type: Flat

# This section contains the configuration for the user interface.
ui:
  # Maximum number of results per video to display in a row.
  max-results-per-video: 10

  # The default text-to-image similarity modes to display in the UI as radio
  # buttons.
  textual-modes:
    - {name: "ClipVideo", mode: "clip2video"}
    - {name: "ClipLAION", mode: "clip-laion"}
    - {name: "Aladin", mode: "aladin"}
    - {name: "use all", mode: "all"}

  # Parameters of the object search UI.
  objects:
    # Object categories to display in the UI for fast drag-and-drop selection.
    # Each category can have a custom icon URL relative to the 'palette'
    # directory in the collection folder. If no URL is specified, the default
    # icon is assumed to be '<name>.png'. You can add a 'break: true' entry to
    # add a line break in the object icons in the UI.
    palette:
      - {name: person}  # by default, urls are assumed to be '<name>.png'
      - {name: man}
      - {name: woman}
      - {name: human_face, url: humanface.png}
      - {name: musical_instrument, url: musical.png}
      - {name: sports_equipment, url: sports.png}
      - {name: skateboard}
      - {name: glasses}
      - {name: bicycle}
      - {name: motorcycle}
      - {name: car}
      # - {break: true}  # you can add a line break in the UI by adding a 'break' entry
      - {name: truck}
      - {name: boat}
      - {name: parachute}
      - {name: airplane, url: aeroplane.png}
      - {name: bench}
      - {name: chair}
      - {name: couch, url: sofa.png}
      - {name: building}
      - {name: umbrella}
      - {name: wine_glass, url: wineglass.png}
      - {name: cup}
      - {name: dessert}
      - {name: cell_phone, url: cellphone.png}
      - {name: television}
      - {name: laptop_computer, url: laptop.png}
      - {name: book}
      - {name: cat}
      - {name: dog}
      - {name: horse}
      - {name: bird}
      - {name: flower}
      - {name: tree}
      - {name: black}
      - {name: blue}
      - {name: brown}
      - {name: green}
      - {name: grey}
      - {name: orange}
      - {name: pink}
      - {name: purple}
      - {name: red}
      - {name: white}
      - {name: yellow}

# This section contains the configuration for the DRES submission service
# (https://github.com/dres-dev/DRES) when VISIONE is used as a DRES client. It
# is used only during competitions and is not needed for normal VISIONE
# operation.
dres:
  endpoint: http://router/dres  # SUBMIT_SERVER=http://router/dres
  username: visione  # SUBMIT_USER
  password: visione  # SUBMIT_PWD
  member_id: visione  # MEMBER_ID
  send_logs: false  # SEND_LOG_TO_DRES
  # SUBMIT_SERVICE=submit  (deprecated)
